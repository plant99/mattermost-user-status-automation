package main

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"os"

	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

const pluginIDGoFileTemplate = `// This file is automatically generated. Do not modify it manually.

package main

import (
	"strings"

	"github.com/mattermost/mattermost-server/v5/model"
)

var manifest *model.Manifest

const manifestStr = ` + "`" + `
%s
` + "`" + `

func init() {
	manifest = model.ManifestFromJson(strings.NewReader(manifestStr))
}
`

const pluginIDJSFileTemplate = `// This file is automatically generated. Do not modify it manually.

const manifest = JSON.parse(` + "`" + `
%s
` + "`" + `);

export default manifest;
export const id = manifest.id;
export const version = manifest.version;
`

func init() {
	manifestCmd.AddCommand(
		manifestIDCmd,
		manifestVersionCmd,
		manifestHasServerCmd,
		manifestHasWebappCmd,
		manifestApplyCmd,
	)
	rootCmd.AddCommand(manifestCmd)
}

var manifestCmd = &cobra.Command{
	Use:   "manifest",
	Short: "Print information for the plugin manifest",
}

var manifestIDCmd = &cobra.Command{
	Use:   "id",
	Short: "Print plugin id",
	Args:  cobra.ExactArgs(0),
	RunE: func(command *cobra.Command, args []string) error {
		m, err := findManifest()
		if err != nil {
			return errors.Wrap(err, "failed to find manifest")
		}

		dumpPluginID(m)

		return nil
	},
}

var manifestVersionCmd = &cobra.Command{
	Use:   "version",
	Short: "Print plugin version",
	Args:  cobra.ExactArgs(0),
	RunE: func(command *cobra.Command, args []string) error {
		m, err := findManifest()
		if err != nil {
			return errors.Wrap(err, "failed to find manifest")
		}

		dumpPluginVersion(m)

		return nil
	},
}

var manifestHasServerCmd = &cobra.Command{
	Use:   "has_server",
	Short: "Output true if the plugin as a server component",
	Args:  cobra.ExactArgs(0),
	RunE: func(command *cobra.Command, args []string) error {
		m, err := findManifest()
		if err != nil {
			return errors.Wrap(err, "failed to find manifest")
		}

		if m.HasServer() {
			fmt.Printf("true")
		}

		return nil
	},
}

var manifestHasWebappCmd = &cobra.Command{
	Use:   "has_webapp",
	Short: "Output true if the plugin as a webapp component",
	Args:  cobra.ExactArgs(0),
	RunE: func(command *cobra.Command, args []string) error {
		m, err := findManifest()
		if err != nil {
			return errors.Wrap(err, "failed to find manifest")
		}

		if m.HasWebapp() {
			fmt.Printf("true")
		}

		return nil
	},
}

var manifestApplyCmd = &cobra.Command{
	Use:   "apply",
	Short: "Apply the content of plugin.json to the language specifc instances of it",
	Args:  cobra.ExactArgs(0),
	RunE: func(command *cobra.Command, args []string) error {
		m, err := findManifest()
		if err != nil {
			return errors.Wrap(err, "failed to find manifest")
		}

		if err = applyManifest(m); err != nil {
			return errors.Wrap(err, "failed to apply manifest")
		}

		return nil
	},
}

func findManifest() (*model.Manifest, error) {
	_, manifestFilePath, err := model.FindManifest(".")
	if err != nil {
		return nil, errors.Wrap(err, "failed to find manifest in current working directory")
	}
	manifestFile, err := os.Open(manifestFilePath)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to open %s", manifestFilePath)
	}
	defer manifestFile.Close()

	// Re-decode the manifest, disallowing unknown fields. When we write the manifest back out,
	// we don't want to accidentally clobber anything we won't preserve.
	var manifest model.Manifest
	decoder := json.NewDecoder(manifestFile)
	decoder.DisallowUnknownFields()
	if err = decoder.Decode(&manifest); err != nil {
		return nil, errors.Wrap(err, "failed to parse manifest")
	}

	return &manifest, nil
}

// dumpPluginId writes the plugin id from the given manifest to standard out
func dumpPluginID(manifest *model.Manifest) {
	fmt.Printf("%s", manifest.Id)
}

// dumpPluginVersion writes the plugin version from the given manifest to standard out
func dumpPluginVersion(manifest *model.Manifest) {
	fmt.Printf("%s", manifest.Version)
}

// writeManifest writes a given manifest back to file
func writeManifest(manifest *model.Manifest) error {
	_, manifestFilePath, err := model.FindManifest(".")
	if err != nil {
		return errors.Wrap(err, "failed to find manifest in current working directory")
	}

	file, err := os.OpenFile(manifestFilePath, os.O_RDWR, 0644)
	if err != nil {
		return errors.Wrapf(err, "failed to open %s", manifestFilePath)
	}
	defer file.Close()

	_, err = file.Seek(0, 0)
	if err != nil {
		return err
	}

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "    ")

	err = encoder.Encode(manifest)
	if err != nil && err != io.EOF {
		return errors.Wrap(err, "failed to encode manifest into manifest file")
	}

	return nil
}

// applyManifest propagates the plugin_id into the server and webapp folders, as necessary
func applyManifest(manifest *model.Manifest) error {
	if manifest.HasServer() {
		// generate JSON representation of Manifest.
		manifestBytes, err := json.MarshalIndent(manifest, "", "  ")
		if err != nil {
			return err
		}
		manifestStr := string(manifestBytes)

		// write generated code to file by using Go file template.
		if err := ioutil.WriteFile(
			"server/manifest.go",
			[]byte(fmt.Sprintf(pluginIDGoFileTemplate, manifestStr)),
			0600,
		); err != nil {
			return errors.Wrap(err, "failed to write server/manifest.go")
		}
	}

	if manifest.HasWebapp() {
		// generate JSON representation of Manifest.
		// JSON is very similar and compatible with JS's object literals. so, what we do here
		// is actually JS code generation.
		manifestBytes, err := json.MarshalIndent(manifest, "", "    ")
		if err != nil {
			return err
		}
		manifestStr := string(manifestBytes)

		// write generated code to file by using JS file template.
		if err := ioutil.WriteFile(
			"webapp/src/manifest.js",
			[]byte(fmt.Sprintf(pluginIDJSFileTemplate, manifestStr)),
			0600,
		); err != nil {
			return errors.Wrap(err, "failed to open webapp/src/manifest.js")
		}
	}

	return nil
}
